================TEST=========
!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/test.py"
--scale 0.0 --structure_model ../save/fire-GS-iccv.ckpt --texture_model ../save/fire-GT-iccv.ckpt --gpu

-----------------------------


貌似必须把那个图片从几百个图的文件夹里单拿出来才能被colab找到。。。
我放到了data/rawtext/yaheiB/less文件夹

火
!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/test.py" --text_name "/content/drive/My Drive/Colab Notebooks/StyleText/data/rawtext/yaheiB/less/0165.png" --scale -1 --scale_step 0.05 --structure_model "/content/drive/My Drive/Colab Notebooks/StyleText/save/fire-GS-iccv.ckpt" --texture_model "/content/drive/My Drive/Colab Notebooks/StyleText/save/fire-GT-iccv.ckpt" --result_dir "/content/drive/My Drive/Colab Notebooks/StyleText/output" --name fire-0745 --gpu

水
!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/test.py" --text_name "/content/drive/My Drive/Colab Notebooks/StyleText/data/rawtext/yaheiB/less/0165.png" --scale -1 --scale_step 0.05 --structure_model "/content/drive/My Drive/Colab Notebooks/StyleText/save/water-GS-iccv.ckpt" --texture_model "/content/drive/My Drive/Colab Notebooks/StyleText/save/water-GT-iccv.ckpt" --result_dir "/content/drive/My Drive/Colab Notebooks/StyleText/output/water-0165/" --name water-0165 --gpu

樱花
!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/test.py" --text_name "/content/drive/My Drive/Colab Notebooks/StyleText/data/rawtext/yaheiB/less/shu_dis.png" --scale -1 --scale_step 0.05 --structure_model "/content/drive/My Drive/Colab Notebooks/StyleText/save/sakura-GS.ckpt" --texture_model "/content/drive/My Drive/Colab Notebooks/StyleText/save/sakura-GT.ckpt" --result_dir "/content/drive/My Drive/Colab Notebooks/StyleText/output/sakura-shu" --name sakura-shu --gpu


=================TRAIN============

---------------style 通用-----------
训练 Sketch Module G_B 

test 3

参数：

添加augmented图像到训练集可以使得G_B更健壮
!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/trainSketchModule.py" --text_path "/content/drive/My Drive/Colab Notebooks/StyleText/data/rawtext/yaheiB/train" --text_datasize 708 --augment_text_path "/content/drive/My Drive/Colab Notebooks/StyleText/data/rawtext/augment" --augment_text_datasize 5 --batchsize 64 --Btraining_num 12800 --save_GB_name "/content/drive/My Drive/Colab Notebooks/StyleText/save/GB.ckpt" --gpu

生成GB.ckpt

-------------style 特定------------
训练Structure Transfer G_S 和 D_S

test 4

参数：
步骤1：G_S 首先以 l = 1训练以学习到最好的变形
步骤2：使用 l in [0,1] 学习两个极端
步骤3：G_S 在 l in [i/K] 之间调整，其中 i=0,1,...K ; K = 3 即--scale_num  4
对于带有方向的模式的结构，训练时最好不要加--Sanglejitter

!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/trainStructureTransfer.py" --style_name "/content/drive/My Drive/Colab Notebooks/StyleText/data/style/sakura.png" --batchsize 32 --Straining_num 2560 --step1_epochs 30 --step2_epochs 40 --step3_epochs 80 --scale_num 4 --Sanglejitter --save_path "/content/drive/My Drive/Colab Notebooks/StyleText/save" --save_name sakura --gpu --load_GB_name "/content/drive/My Drive/Colab Notebooks/StyleText/save/GB.ckpt"

生成sakura-GS.ckpt与sakura-DS.ckpt；S指的是结构

-------------style 特定---------------

训练Texture Transfer G_T 和 D_T
对于复杂的样式或具有方向性样式的样式，最好不使用--Tanglejitter进行训练

樱花纹理应该属于没有方向的。。。所以加上--Tanglejitter

!python "/content/drive/My Drive/Colab Notebooks/StyleText/src/trainTextureTransfer.py" --style_name "/content/drive/My Drive/Colab Notebooks/StyleText/data/style/sakura.png" --batchsize 32 --Ttraining_num 800 --texture_step1_epochs 40 --Tanglejitter --save_path "/content/drive/My Drive/Colab Notebooks/StyleText/save" --save_name sakura --gpu --load_GB_name "/content/drive/My Drive/Colab Notebooks/StyleText/save/GB.ckpt" --load_GS_name "/content/drive/My Drive/Colab Notebooks/StyleText/save/sakura-GS.ckpt" --text_path "/content/drive/My Drive/Colab Notebooks/StyleText/data/rawtext/yaheiB/train"

应该生成sakura-GT.ckpt和sakura-DT.ckpt；T指的是纹理


========================
使用自己的风格图像
风格图像准备：
- 为了使风格化的文本易于识别，希望在文本和背景之间有一定的区别。如果纹理没有明显的形状，则生成的风格化文本将与背景互相混合。因此，建议使用具有不同形状的纹理作为参考样式。不要使用覆盖整个风格图像的纹理。
- 使用抠图算法或者PS快速选择工具得到风格图像 Y 黑白的结构图 X 。（纹理部分是黑还是白？）
- 得到结构图 X 的基于距离的图：使用utils.text_image_preprocessing转换黑白的 X 为 基于距离的 X。
- 拼接基于距离的 X 和原风格图像 Y。拼接方式见data/style